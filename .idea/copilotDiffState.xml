<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/fr/anthonus/utils/api/YoutubeAPI.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/fr/anthonus/utils/api/YoutubeAPI.java" />
              <option name="originalContent" value="package fr.anthonus.utils.api;&#10;&#10;import com.google.gson.JsonArray;&#10;import com.google.gson.JsonParser;&#10;import fr.anthonus.logs.LOGs;&#10;import fr.anthonus.logs.logTypes.DefaultLogType;&#10;import fr.anthonus.utils.settings.SettingsLoader;&#10;import net.dv8tion.jda.api.EmbedBuilder;&#10;import net.dv8tion.jda.api.events.interaction.command.SlashCommandInteractionEvent;&#10;import okhttp3.OkHttpClient;&#10;import okhttp3.Request;&#10;import okhttp3.Response;&#10;&#10;import java.awt.*;&#10;import java.io.BufferedReader;&#10;import java.io.File;&#10;import java.io.IOException;&#10;import java.io.InputStreamReader;&#10;import java.net.URLEncoder;&#10;import java.nio.charset.StandardCharsets;&#10;import java.nio.file.Files;&#10;import java.nio.file.Path;&#10;import java.nio.file.Paths;&#10;import java.nio.file.StandardCopyOption;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class YoutubeAPI {&#10;    private static final OkHttpClient client = new OkHttpClient();&#10;&#10;    public static List&lt;String&gt; getVideoURL(String query, int maxResults) {&#10;        query = URLEncoder.encode(query, StandardCharsets.UTF_8);&#10;&#10;        String apiURL = &quot;https://www.googleapis.com/youtube/v3/search?part=snippet&amp;maxResults=&quot; + maxResults + &quot;&amp;q=&quot; + query + &quot;&amp;type=video&amp;key=&quot; + SettingsLoader.getYoutubeApiKey();&#10;&#10;        String jsonData = getJsonData(apiURL);&#10;&#10;        JsonArray items = JsonParser.parseString(jsonData)&#10;                .getAsJsonObject()&#10;                .getAsJsonArray(&quot;items&quot;);&#10;&#10;        if (items.size() == 0) {&#10;            LOGs.sendLog(&quot;Aucun résultat trouvé pour la requête : &quot; + query, DefaultLogType.WARNING);&#10;            return new ArrayList&lt;&gt;();&#10;        }&#10;&#10;        List&lt;String&gt; videoURLs = new ArrayList&lt;&gt;();&#10;        for (int i = 0; i &lt; items.size(); i++) {&#10;            String videoId = items.get(i)&#10;                    .getAsJsonObject()&#10;                    .getAsJsonObject(&quot;id&quot;)&#10;                    .get(&quot;videoId&quot;).getAsString();&#10;&#10;            String videoURL = &quot;https://www.youtube.com/watch?v=&quot; + videoId;&#10;            videoURLs.add(videoURL);&#10;        }&#10;&#10;        return videoURLs;&#10;&#10;    }&#10;&#10;    public static String getVideoTitle(String videoURL) {&#10;        String videoId = getVideoId(videoURL);&#10;&#10;        String apiURL = &quot;https://www.googleapis.com/youtube/v3/videos?part=snippet&amp;id=&quot; + videoId + &quot;&amp;key=&quot; + SettingsLoader.getYoutubeApiKey();&#10;&#10;        String jsonData = getJsonData(apiURL);&#10;&#10;        JsonArray items = JsonParser.parseString(jsonData)&#10;                .getAsJsonObject()&#10;                .getAsJsonArray(&quot;items&quot;);&#10;&#10;        if (items.isEmpty()) {&#10;            LOGs.sendLog(&quot;Aucun résultat trouvé pour la requête avec l'id : &quot; + videoId, DefaultLogType.WARNING);&#10;            return null;&#10;        }&#10;&#10;        return items.get(0).getAsJsonObject()&#10;                .getAsJsonObject(&quot;snippet&quot;)&#10;                .get(&quot;title&quot;).getAsString();&#10;    }&#10;&#10;    public static void downloadVideo(SlashCommandInteractionEvent event, String lien, boolean isMusic, String videoTitle) {&#10;        LOGs.sendLog(&quot;Démarrage du téléchargement de la vidéo : &quot; + lien, DefaultLogType.DOWNLOAD);&#10;        File tempFolder = new File(&quot;temp&quot;);&#10;&#10;        LOGs.sendLog(&quot;Création du processus de téléchargement&quot;, DefaultLogType.DOWNLOAD);&#10;        ProcessBuilder processBuilder;&#10;        if (isMusic) {&#10;            processBuilder = new ProcessBuilder(&#10;                    &quot;data/yt-dlp.exe&quot;,&#10;                    &quot;--embed-thumbnail&quot;,&#10;                    &quot;--embed-metadata&quot;,&#10;                    &quot;-f&quot;, &quot;bestaudio&quot;,&#10;                    &quot;-x&quot;,&#10;                    &quot;--audio-format&quot;, &quot;mp3&quot;,&#10;                    &quot;--audio-quality&quot;, &quot;320k&quot;,&#10;                    &quot;--output&quot;, &quot;temp/%(title)s.%(ext)s&quot;,&#10;                    lien&#10;            );&#10;        } else {&#10;            processBuilder = new ProcessBuilder(&#10;                    &quot;data/yt-dlp.exe&quot;,&#10;                    &quot;--embed-thumbnail&quot;,&#10;                    &quot;--embed-metadata&quot;,&#10;                    &quot;-f&quot;, &quot;bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best&quot;,&#10;                    &quot;--merge-output-format&quot;, &quot;mp4&quot;,&#10;                    &quot;--output&quot;, &quot;temp/%(title)s.%(ext)s&quot;,&#10;                    lien&#10;            );&#10;        }&#10;        LOGs.sendLog(&quot;Processus de téléchargement créé&quot;, DefaultLogType.DOWNLOAD);&#10;&#10;        LOGs.sendLog(&quot;Lancement du processus de téléchargement&quot;, DefaultLogType.DOWNLOAD);&#10;        try {&#10;            Process process = processBuilder.start();&#10;&#10;            BufferedReader br = new BufferedReader(new InputStreamReader(process.getInputStream()));&#10;            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));&#10;            String line;&#10;&#10;            while ((line = br.readLine()) != null) {&#10;                LOGs.sendLog(line, DefaultLogType.DOWNLOAD_CMD);&#10;            }&#10;&#10;            while ((line = errorReader.readLine()) != null) {&#10;                LOGs.sendLog(line, DefaultLogType.ERROR_CMD);&#10;            }&#10;&#10;            int exitCode = process.waitFor();&#10;&#10;            if (exitCode != 0) {&#10;                throw new IOException(&quot;Le processus de téléchargement a échoué avec le code de sortie : &quot; + exitCode);&#10;            }&#10;&#10;        } catch (IOException | InterruptedException e) {&#10;            sendErrorEmbed(event, e);&#10;        }&#10;        LOGs.sendLog(&quot;Téléchargement terminé&quot;, DefaultLogType.DOWNLOAD);&#10;&#10;        LOGs.sendLog(&quot;Upload du fichier sur le NAS&quot;, DefaultLogType.DOWNLOAD);&#10;        File downloadedFile = new File(tempFolder, videoTitle + (isMusic ? &quot;.mp3&quot; : &quot;.mp4&quot;));&#10;&#10;        LOGs.sendLog(&quot;Déplacement du fichier téléchargé vers le NAS&quot;, DefaultLogType.DOWNLOAD);&#10;        try {&#10;        Path sourcePath = Paths.get(downloadedFile.getAbsolutePath());&#10;        Path destinationPath = Paths.get(SettingsLoader.getSharingDirectory(), downloadedFile.getName());&#10;            Files.move(sourcePath, destinationPath, StandardCopyOption.REPLACE_EXISTING);&#10;        } catch (IOException e) {&#10;            sendErrorEmbed(event, e);&#10;            return;&#10;        }&#10;        LOGs.sendLog(&quot;Fichier déplacé vers le NAS&quot;, DefaultLogType.DOWNLOAD);&#10;&#10;        LOGs.sendLog(&quot;Envoi du lien de téléchargement&quot;, DefaultLogType.DOWNLOAD);&#10;        String encodedFileName = URLEncoder.encode(downloadedFile.getName(), StandardCharsets.UTF_8);&#10;        String downloadLink = SettingsLoader.getSharingURL() + &quot;/&quot; + encodedFileName;&#10;        downloadLink = downloadLink.replace(&quot;+&quot;, &quot;%20&quot;);&#10;&#10;        EmbedBuilder embed = new EmbedBuilder();&#10;        embed.setTitle(&quot;:white_check_mark: Téléchargement terminé :white_check_mark:&quot;);&#10;        embed.setDescription(&quot;[Lien direct](&quot; + downloadLink + &quot;)\n&quot; +&#10;                &quot;[Lien de téléchargement](&quot; + downloadLink + &quot;?download)&quot;);&#10;        event.getHook().editOriginalEmbeds(embed.build()).queue();&#10;        LOGs.sendLog(&quot;Lien de téléchargement envoyé&quot;, DefaultLogType.DOWNLOAD);&#10;    }&#10;&#10;    private static void sendErrorEmbed(SlashCommandInteractionEvent event, Exception e) {&#10;        EmbedBuilder embed = new EmbedBuilder();&#10;        embed.setTitle(&quot;:x: Erreur lors du téléchargement :x:&quot;);&#10;        embed.setDescription(&quot;Une erreur est survenue lors du téléchargement de la vidéo. Veuillez réessayer.\n&quot; +&#10;                &quot;Détails de l'erreur : &quot; + e.getMessage());&#10;        embed.setFooter(&quot;Si le problème persiste, veuillez contacter le support.&quot;);&#10;&#10;        embed.setColor(Color.RED);&#10;&#10;        event.getHook().editOriginalEmbeds(embed.build()).queue();&#10;&#10;        LOGs.sendLog(&quot;Erreur lors du téléchargement de la vidéo : &quot; + e.getMessage(), DefaultLogType.ERROR);&#10;&#10;        return;&#10;    }&#10;&#10;    private static String getVideoId(String videoURL) {&#10;        if (videoURL.contains(&quot;youtu.be/&quot;)) {&#10;            return videoURL.substring(videoURL.lastIndexOf(&quot;/&quot;) + 1);&#10;        } else if (videoURL.contains(&quot;youtube.com/watch?v=&quot;)) {&#10;            return videoURL.substring(videoURL.indexOf(&quot;v=&quot;) + 2, videoURL.indexOf(&quot;&amp;&quot;));&#10;        } else {&#10;            throw new IllegalArgumentException(&quot;URL de vidéo YouTube invalide : &quot; + videoURL);&#10;        }&#10;    }&#10;&#10;    private static String getJsonData(String url) {&#10;        LOGs.sendLog(&quot;Création de la requête pour l'API YouTube&quot;, DefaultLogType.API);&#10;        Request request = new Request.Builder()&#10;                .url(url)&#10;                .build();&#10;&#10;        LOGs.sendLog(&quot;Envoi de la requête à l'API YouTube&quot;, DefaultLogType.API);&#10;        try (Response response = client.newCall(request).execute()) {&#10;            if (!response.isSuccessful()) {&#10;                throw new IOException(&quot;Unexpected code &quot; + response);&#10;            }&#10;            LOGs.sendLog(&quot;Requête recue&quot;, DefaultLogType.API);&#10;&#10;            return response.body().string();&#10;        } catch (IOException e) {&#10;            throw new RuntimeException(e);&#10;        }&#10;    }&#10;&#10;}&#10;" />
              <option name="updatedContent" value="package fr.anthonus.utils.api;&#10;&#10;import com.google.gson.JsonArray;&#10;import com.google.gson.JsonParser;&#10;import fr.anthonus.logs.LOGs;&#10;import fr.anthonus.logs.logTypes.DefaultLogType;&#10;import fr.anthonus.utils.settings.SettingsLoader;&#10;import net.dv8tion.jda.api.EmbedBuilder;&#10;import net.dv8tion.jda.api.events.interaction.command.SlashCommandInteractionEvent;&#10;import okhttp3.OkHttpClient;&#10;import okhttp3.Request;&#10;import okhttp3.Response;&#10;&#10;import java.awt.*;&#10;import java.io.BufferedReader;&#10;import java.io.File;&#10;import java.io.IOException;&#10;import java.io.InputStreamReader;&#10;import java.net.URLEncoder;&#10;import java.nio.charset.StandardCharsets;&#10;import java.nio.file.Files;&#10;import java.nio.file.Path;&#10;import java.nio.file.Paths;&#10;import java.nio.file.StandardCopyOption;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class YoutubeAPI {&#10;    private static final OkHttpClient client = new OkHttpClient();&#10;&#10;    public static List&lt;String&gt; getVideoURL(String query, int maxResults) {&#10;        query = URLEncoder.encode(query, StandardCharsets.UTF_8);&#10;&#10;        String apiURL = &quot;https://www.googleapis.com/youtube/v3/search?part=snippet&amp;maxResults=&quot; + maxResults + &quot;&amp;q=&quot; + query + &quot;&amp;type=video&amp;key=&quot; + SettingsLoader.getYoutubeApiKey();&#10;&#10;        String jsonData = getJsonData(apiURL);&#10;&#10;        JsonArray items = JsonParser.parseString(jsonData)&#10;                .getAsJsonObject()&#10;                .getAsJsonArray(&quot;items&quot;);&#10;&#10;        if (items.size() == 0) {&#10;            LOGs.sendLog(&quot;Aucun résultat trouvé pour la requête : &quot; + query, DefaultLogType.WARNING);&#10;            return new ArrayList&lt;&gt;();&#10;        }&#10;&#10;        List&lt;String&gt; videoURLs = new ArrayList&lt;&gt;();&#10;        for (int i = 0; i &lt; items.size(); i++) {&#10;            String videoId = items.get(i)&#10;                    .getAsJsonObject()&#10;                    .getAsJsonObject(&quot;id&quot;)&#10;                    .get(&quot;videoId&quot;).getAsString();&#10;&#10;            String videoURL = &quot;https://www.youtube.com/watch?v=&quot; + videoId;&#10;            videoURLs.add(videoURL);&#10;        }&#10;&#10;        return videoURLs;&#10;&#10;    }&#10;&#10;    public static String getVideoTitle(String videoURL) {&#10;        String videoId = getVideoId(videoURL);&#10;&#10;        String apiURL = &quot;https://www.googleapis.com/youtube/v3/videos?part=snippet&amp;id=&quot; + videoId + &quot;&amp;key=&quot; + SettingsLoader.getYoutubeApiKey();&#10;&#10;        String jsonData = getJsonData(apiURL);&#10;&#10;        JsonArray items = JsonParser.parseString(jsonData)&#10;                .getAsJsonObject()&#10;                .getAsJsonArray(&quot;items&quot;);&#10;&#10;        if (items.isEmpty()) {&#10;            LOGs.sendLog(&quot;Aucun résultat trouvé pour la requête avec l'id : &quot; + videoId, DefaultLogType.WARNING);&#10;            return null;&#10;        }&#10;&#10;        return items.get(0).getAsJsonObject()&#10;                .getAsJsonObject(&quot;snippet&quot;)&#10;                .get(&quot;title&quot;).getAsString();&#10;    }&#10;&#10;    public static void downloadVideo(SlashCommandInteractionEvent event, String lien, boolean isMusic, String videoTitle) {&#10;        LOGs.sendLog(&quot;Démarrage du téléchargement de la vidéo : &quot; + lien, DefaultLogType.DOWNLOAD);&#10;        File tempFolder = new File(&quot;temp&quot;);&#10;&#10;        LOGs.sendLog(&quot;Création du processus de téléchargement&quot;, DefaultLogType.DOWNLOAD);&#10;        ProcessBuilder processBuilder;&#10;        if (isMusic) {&#10;            processBuilder = new ProcessBuilder(&#10;                    &quot;data/yt-dlp.exe&quot;,&#10;                    &quot;--embed-thumbnail&quot;,&#10;                    &quot;--embed-metadata&quot;,&#10;                    &quot;-f&quot;, &quot;bestaudio&quot;,&#10;                    &quot;-x&quot;,&#10;                    &quot;--audio-format&quot;, &quot;mp3&quot;,&#10;                    &quot;--audio-quality&quot;, &quot;320k&quot;,&#10;                    &quot;--output&quot;, &quot;temp/%(title)s.%(ext)s&quot;,&#10;                    lien&#10;            );&#10;        } else {&#10;            processBuilder = new ProcessBuilder(&#10;                    &quot;data/yt-dlp.exe&quot;,&#10;                    &quot;--embed-thumbnail&quot;,&#10;                    &quot;--embed-metadata&quot;,&#10;                    &quot;-f&quot;, &quot;bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best&quot;,&#10;                    &quot;--merge-output-format&quot;, &quot;mp4&quot;,&#10;                    &quot;--output&quot;, &quot;temp/%(title)s.%(ext)s&quot;,&#10;                    lien&#10;            );&#10;        }&#10;        LOGs.sendLog(&quot;Processus de téléchargement créé&quot;, DefaultLogType.DOWNLOAD);&#10;&#10;        LOGs.sendLog(&quot;Lancement du processus de téléchargement&quot;, DefaultLogType.DOWNLOAD);&#10;        try {&#10;            Process process = processBuilder.start();&#10;&#10;            BufferedReader br = new BufferedReader(new InputStreamReader(process.getInputStream()));&#10;            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));&#10;            String line;&#10;&#10;            while ((line = br.readLine()) != null) {&#10;                LOGs.sendLog(line, DefaultLogType.DOWNLOAD_CMD);&#10;            }&#10;&#10;            while ((line = errorReader.readLine()) != null) {&#10;                LOGs.sendLog(line, DefaultLogType.ERROR_CMD);&#10;            }&#10;&#10;            int exitCode = process.waitFor();&#10;&#10;            if (exitCode != 0) {&#10;                throw new IOException(&quot;Le processus de téléchargement a échoué avec le code de sortie : &quot; + exitCode);&#10;            }&#10;&#10;        } catch (IOException | InterruptedException e) {&#10;            sendErrorEmbed(event, e);&#10;        }&#10;        LOGs.sendLog(&quot;Téléchargement terminé&quot;, DefaultLogType.DOWNLOAD);&#10;&#10;        LOGs.sendLog(&quot;Upload du fichier sur le NAS&quot;, DefaultLogType.DOWNLOAD);&#10;        File downloadedFile = new File(tempFolder, videoTitle + (isMusic ? &quot;.mp3&quot; : &quot;.mp4&quot;));&#10;&#10;        LOGs.sendLog(&quot;Déplacement du fichier téléchargé vers le NAS&quot;, DefaultLogType.DOWNLOAD);&#10;        try {&#10;        Path sourcePath = Paths.get(downloadedFile.getAbsolutePath());&#10;        Path destinationPath = Paths.get(SettingsLoader.getSharingDirectory(), downloadedFile.getName());&#10;            Files.move(sourcePath, destinationPath, StandardCopyOption.REPLACE_EXISTING);&#10;        } catch (IOException e) {&#10;            sendErrorEmbed(event, e);&#10;            return;&#10;        }&#10;        LOGs.sendLog(&quot;Fichier déplacé vers le NAS&quot;, DefaultLogType.DOWNLOAD);&#10;&#10;        LOGs.sendLog(&quot;Envoi du lien de téléchargement&quot;, DefaultLogType.DOWNLOAD);&#10;        String encodedFileName = URLEncoder.encode(downloadedFile.getName(), StandardCharsets.UTF_8);&#10;        String downloadLink = SettingsLoader.getSharingURL() + &quot;/&quot; + encodedFileName;&#10;        downloadLink = downloadLink.replace(&quot;+&quot;, &quot;%20&quot;);&#10;&#10;        EmbedBuilder embed = new EmbedBuilder();&#10;        embed.setTitle(&quot;:white_check_mark: Téléchargement terminé :white_check_mark:&quot;);&#10;        embed.setDescription(&quot;[Lien direct](&quot; + downloadLink + &quot;)\n&quot; +&#10;                &quot;[Lien de téléchargement](&quot; + downloadLink + &quot;?download)&quot;);&#10;        event.getHook().editOriginalEmbeds(embed.build()).queue();&#10;        LOGs.sendLog(&quot;Lien de téléchargement envoyé&quot;, DefaultLogType.DOWNLOAD);&#10;    }&#10;&#10;    private static void sendErrorEmbed(SlashCommandInteractionEvent event, Exception e) {&#10;        EmbedBuilder embed = new EmbedBuilder();&#10;        embed.setTitle(&quot;:x: Erreur lors du téléchargement :x:&quot;);&#10;        embed.setDescription(&quot;Une erreur est survenue lors du téléchargement de la vidéo. Veuillez réessayer.\n&quot; +&#10;                &quot;Détails de l'erreur : &quot; + e.getMessage());&#10;        embed.setFooter(&quot;Si le problème persiste, veuillez contacter le support.&quot;);&#10;&#10;        embed.setColor(Color.RED);&#10;&#10;        event.getHook().editOriginalEmbeds(embed.build()).queue();&#10;&#10;        LOGs.sendLog(&quot;Erreur lors du téléchargement de la vidéo : &quot; + e.getMessage(), DefaultLogType.ERROR);&#10;&#10;        return;&#10;    }&#10;&#10;    private static String getVideoId(String videoURL) {&#10;        if (videoURL.contains(&quot;youtu.be/&quot;)) {&#10;            return videoURL.substring(videoURL.lastIndexOf(&quot;/&quot;) + 1);&#10;        } else if (videoURL.contains(&quot;youtube.com/watch?v=&quot;)) {&#10;            return videoURL.substring(videoURL.indexOf(&quot;v=&quot;) + 2, videoURL.indexOf(&quot;&amp;&quot;));&#10;        } else {&#10;            throw new IllegalArgumentException(&quot;URL de vidéo YouTube invalide : &quot; + videoURL);&#10;        }&#10;    }&#10;&#10;    private static String getJsonData(String url) {&#10;        LOGs.sendLog(&quot;Création de la requête pour l'API YouTube&quot;, DefaultLogType.API);&#10;        Request request = new Request.Builder()&#10;                .url(url)&#10;                .build();&#10;&#10;        LOGs.sendLog(&quot;Envoi de la requête à l'API YouTube&quot;, DefaultLogType.API);&#10;        try (Response response = client.newCall(request).execute()) {&#10;            if (!response.isSuccessful()) {&#10;                throw new IOException(&quot;Unexpected code &quot; + response);&#10;            }&#10;            LOGs.sendLog(&quot;Requête recue&quot;, DefaultLogType.API);&#10;&#10;            return response.body().string();&#10;        } catch (IOException e) {&#10;            throw new RuntimeException(e);&#10;        }&#10;    }&#10;&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>